generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  holdings      Holding[]
  sessions      Session[]
  transactions  Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Stock {
  id           String        @id @default(cuid())
  code         String        @unique
  name         String
  market       String
  sector       String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  dividends    Dividend[]
  holdings     Holding[]
  transactions Transaction[]

  @@index([code])
  @@index([market])
  @@index([sector])
}

model Holding {
  id              String   @id @default(cuid())
  userId          String
  stockId         String
  quantity        Int
  averagePrice    Decimal  @db.Decimal(10, 2)
  currentPrice    Decimal? @db.Decimal(10, 2)
  marketValue     Decimal? @db.Decimal(12, 2)
  gainLoss        Decimal? @db.Decimal(12, 2)
  gainLossPercent Decimal? @db.Decimal(8, 4)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  stock           Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stockId])
  @@index([userId])
}

model Dividend {
  id               String    @id @default(cuid())
  stockId          String
  dividendDate     DateTime
  dividendPerShare Decimal   @db.Decimal(8, 2)
  exDividendDate   DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  stock            Stock     @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@index([stockId])
  @@index([dividendDate])
}

model Transaction {
  id        String          @id @default(cuid())
  userId    String
  stockId   String
  type      TransactionType
  quantity  Int
  price     Decimal         @db.Decimal(10, 2)
  amount    Decimal         @db.Decimal(12, 2)
  date      DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  stock     Stock           @relation(fields: [stockId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stockId])
  @@index([date])
}

enum TransactionType {
  BUY
  SELL
}
